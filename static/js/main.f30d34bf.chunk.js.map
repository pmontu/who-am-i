{"version":3,"sources":["config.js","App.js","actions.js","serviceWorker.js","index.js"],"names":["process","DEV_SERVER_PORT","App","props","useState","result","setResult","isLoading","setIsLoading","handleTakePhoto","dataUri","img","Promise","resolve","reject","fetch","method","headers","accept","body","JSON","stringify","b64_img","then","response","ok","Error","json","data","catch","err","CircularProgress","onTakePhoto","map","person","index","emotions","Object","entries","faceAttributes","emotion","sort","a","b","getEmotions","key","age","e","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"qPAAwBA,4HAAYC,gB,YC4DrBC,MAnDf,SAAaC,GAAQ,IAAD,EACUC,mBAAS,IADnB,mBACXC,EADW,KACHC,EADG,OAEgBF,oBAAS,GAFzB,mBAEXG,EAFW,KAEAC,EAFA,KAIlB,SAASC,EAAgBC,GCXpB,IAAiBC,EDYpBH,GAAa,ICZOG,EDaZD,ECZH,IAAIE,SAAQ,SAACC,EAASC,GAC3BC,MAAM,GAAD,OFDH,yCECG,aAAiC,CACpCC,OAAQ,OACRC,QAAS,CAAEC,OAAQ,oBACnBC,KAAMC,KAAKC,UAAU,CAAEC,QAASX,MAE/BY,MAAK,SAACC,GACL,IAAKA,EAASC,GAAI,MAAMC,MAAM,mBAC9B,OAAOF,EAASG,UAEjBJ,MAAK,SAACK,GAAD,OAAUf,EAAQe,MACvBC,OAAM,SAACC,GAAD,OAAShB,EAAOgB,UDCRP,MAAK,SAACK,GACrBtB,EAAUsB,GACVpB,GAAa,MAIjB,OACE,6BACGD,EACC,kBAACwB,EAAA,EAAD,MAEA,oCACE,6BACE,kBAAC,IAAD,CACEC,YAAa,SAACtB,GACZD,EAAgBC,OAItB,6BACGL,EAAO4B,KAAI,SAACC,EAAQC,GACnB,IAAMC,EA9BA,SAACF,GAAD,OAClBG,OAAOC,QAAQJ,EAAOK,eAAeC,SAASC,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE,GAAKD,EAAE,MA6BzCE,CAAYV,GAC7B,OACE,yBAAKW,IAAKV,GACR,sCAAYA,EAAQ,GACpB,oCAAUD,EAAOK,eAAeO,KAChC,+BACE,+BACGV,EAASH,KAAI,SAACc,EAAGZ,GAAJ,OACZ,wBAAIU,IAAKV,GACP,4BAAKY,EAAE,IACP,4BAAKA,EAAE,kBElCbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdjC,OAAM,SAAAkC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f30d34bf.chunk.js","sourcesContent":["const DEV_SERVER_PORT = process.env.DEV_SERVER_PORT || 7071;\nexport const SERVER_BASE_PATH =\n  process.env.NODE_ENV === \"production\"\n    ? \"https://hari-student.azurewebsites.net\"\n    : `http://localhost:${DEV_SERVER_PORT}`;\n","import React, { useState } from \"react\";\nimport Camera from \"react-html5-camera-photo\";\nimport \"react-html5-camera-photo/build/css/index.css\";\nimport { postImg } from \"./actions\";\nimport { CircularProgress } from \"@material-ui/core/\";\n\nconst getEmotions = (person) =>\n  Object.entries(person.faceAttributes.emotion).sort((a, b) => b[1] - a[1]);\n\nfunction App(props) {\n  const [result, setResult] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  function handleTakePhoto(dataUri) {\n    setIsLoading(true);\n    postImg(dataUri).then((data) => {\n      setResult(data);\n      setIsLoading(false);\n    });\n  }\n\n  return (\n    <div>\n      {isLoading ? (\n        <CircularProgress />\n      ) : (\n        <>\n          <div>\n            <Camera\n              onTakePhoto={(dataUri) => {\n                handleTakePhoto(dataUri);\n              }}\n            />\n          </div>\n          <div>\n            {result.map((person, index) => {\n              const emotions = getEmotions(person);\n              return (\n                <div key={index}>\n                  <h3>Person {index + 1}</h3>\n                  <h6>Age: {person.faceAttributes.age}</h6>\n                  <table>\n                    <tbody>\n                      {emotions.map((e, index) => (\n                        <tr key={index}>\n                          <td>{e[0]}</td>\n                          <td>{e[1]}</td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              );\n            })}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\nexport default App;\n","import { SERVER_BASE_PATH } from \"./config\";\n\nexport function postImg(img) {\n  return new Promise((resolve, reject) => {\n    fetch(`${SERVER_BASE_PATH}/api/face`, {\n      method: \"POST\",\n      headers: { accept: \"application/json\" },\n      body: JSON.stringify({ b64_img: img }),\n    })\n      .then((response) => {\n        if (!response.ok) throw Error(\"failed to fetch\");\n        return response.json();\n      })\n      .then((data) => resolve(data))\n      .catch((err) => reject(err));\n  });\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}